{"name":"ESWC2015 PAPER EVALUATION","tagline":"","body":"#Evaluation\r\n##Time Measurements\r\nThe time measurements were taken by running the scripts on a desktop computer having the following characteristics:\r\n* CPU: AMD Phenom II X4 965\r\n* RAM: 12GB DDR3\r\n* OS: Ubuntu Linux 14.04, kernel version: 3.13.0-44-generic\r\n* Packages: Python 2.7.9 (64bit), networkx v1.8, librdf, gnuplot v4.6\r\n\r\n##Querying the RDF-type Summary Graph\r\nThe execution of a query against an RDF-type summary graph consists of three steps:\r\n\r\n1. identification of the given typed nodes,\r\n1. calculation of the shortest path between these nodes and \r\n1. conversion of the path to the corresponding SPARQL 1.0 query.\r\n\r\nThe example query presented in the evaluation section of the paper is this:\r\n\r\n    PREFIX dbonto: <http://dbpedia.org/ontology/>\r\n    PREFIX dbp: <http://dbpedia.org/property/>\r\n    SELECT * WHERE {\r\n    ?a a dbonto:MusicalWork.\r\n    ?a ((!a)*/dbp:stylisticOrigins)|(dbp:stylisticOrigins/(!a)*) ?b.\r\n    ?b a dbonto:MusicGenre\r\n    }\r\n\r\nIn the following paragraphs we give a more thorough analysis of the steps involved in the execution of this query to the RDF-type summary graphs.\r\n\r\n###Node Identification\r\nThe identification step involves retrieving a list of (possibly composite) nodes that contain the given RDF-type and selecting one from this list. In a real-life scenario, the user would have to be able to select the node that is semantically closer to his/hers information needs. However, since the proposed evaluation is\r\njust meant to assess the scalability of the proposed approach, any node may be selected, as long as it exists in all the datasets that participate in the evaluation scenario. Along these lines, we have selected the nodes described below, but the reader may select any of the given nodes and perform the rest of the evaluation process.\r\n\r\nThe example SPARQL 1.1 query presented in the evaluation section of the paper contains two RDF types, one in the triple pattern preceding the Property Path (eg. <http://dbpedia.org/ontology/MusicalWork>) and one in the final triple pattern (eg. <http://dbpedia.org/ontology/MusicGenre>). During the identification step, we choose the following common nodes of the RDF-type summary graphs respectively:\r\n\r\n* 'http://dbpedia.org/ontology/Album^http://dbpedia.org/ontology/MusicalWork^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/Work'\r\n* 'http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing'\r\n\r\nBoth of the nodes are composite nodes. The '^' character is used as an RDF type delimiter inside composite nodes. The first node corresponds to <http://dbpedia.org/ontology/MusicalWork>, since it contains the same IRI. The second node corresponds to <http://dbpedia.org/ontology/MusicGenre> for the same reason.\r\n\r\n\r\n**Selecting Other Nodes**\r\n\r\nIn order to select other nodes than the ones presented above, the user must follow these instructions:\r\n\r\n1. Download and extract the [master](https://github.com/SWRG/ESWC2015-paper-evaluation/tarball/master) branch of this repository.\r\n1. Open a terminal and change directory to the one containing the downloaded python scripts.\r\n1. If the RDF-type summary graphs do not exist in the system, they must be created first. This can be accomplished either by executing the summary creation script directly:\r\n\r\n        create_summary.py benchmark_x.nt\r\nwhere benchmark_x.nt is one input dataset, or by executing once the automated_evaluation.py (see section 'Automated evaluation script' about usage and dataset retrieval). The first command creates the RDF-type summary graph that corresponds to the input N-Triples file.\r\n1. Install the ipython package:\r\n\r\n        sudo apt-get install ipython\r\n1. Open an interactive Python interface by giving the command:\r\n\r\n        ipython\r\n1. Create a general RDF-type summary graph querying object and set the predicate of the Property Path:\r\n\r\n        from RDFTypeSummary import *\r\n        mysum=RDFTypeSummary()\r\n        q_p='http://dbpedia.org/property/stylisticOrigins'\r\n1. Load an RDF-type summary graph by passing the filepath as a parameter:\r\n\r\n        mysum.loaddb('/path/to/summary.edgelist')\r\n\r\n1. Get a list of composite nodes that contain the RDF-type IRI <http://dbpedia.org/ontology/MusicalWork>\r\n\r\n        candidate_nodes_1=[n for n in mysum.db_graph if 'http://dbpedia.org/ontology/MusicalWork' in n]\r\n\r\n1. Read the list and select a node.  Let's assume you selected the third node in the list. Give the command:\r\n\r\n        q_s=candidate_nodes_1[2]\r\n1. Get a list of composite nodes that contain the RDF-type IRI <http://dbpedia.org/ontology/MusicGenre>\r\n\r\n        candidate_nodes_2=[n for n in mysum.db_graph if 'http://dbpedia.org/ontology/MusicGenre' in n]\r\n1. Read the list and select a node.  Let's assume you selected the fourth node in the list. Give the command:\r\n\r\n        q_t=candidate_nodes_2[3]\r\n1. At this point we have identified two nodes in the RDF-type summary graph and we are ready to measure the execution time of the query as follows:\r\n\r\n        mysum.execute_query(q_s,q_p,q_t)\r\nIf the query succeeds we see a list that contains the generated SPARQL 1.0 code, the shortest path, the path cost and the execution time.\r\n\r\n###Shortest Path Calculation\r\nAfter the identification step, a restricted shortest path algorithm is used in order to find the shortest path between the two nodes. The algorithm is based on Dijkstra's shortest path algorithm which has a worst case complexity of O(V^2), where V is the number of nodes in the graph.\r\n\r\n###Path to SPARQL 1.0 Conversion\r\nIn the following subsections we present the calculated shortest path and the generated SPARQL code after querying the RDF-type summary of every dataset.\r\n\r\n**RDF-Type Summary Graph of the 1% Dataset**\r\n\r\nThe shortest path found by the algorithm is:\r\n\r\n    ['http://dbpedia.org/ontology/Album^http://dbpedia.org/ontology/MusicalWork^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/Work',('http://dbpedia.org/ontology/Album^http://dbpedia.org/ontology/MusicalWork^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/Work','http://dbpedia.org/ontology/genre','http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/class/yago/FusionMusicGenres^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/PopMusicGenres'),'http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/class/yago/FusionMusicGenres^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/PopMusicGenres',('http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/class/yago/FusionMusicGenres^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/PopMusicGenres','http://dbpedia.org/property/otherTopics','http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing',('http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing','http://dbpedia.org/property/stylisticOrigins','http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing']\r\n\r\nThe path is converted to this SPARQL 1.0 code:\r\n\r\n    SELECT DISTINCT * WHERE {\r\n    ?_4 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_4 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_4 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Album> .\r\n    ?_1 a <http://dbpedia.org/ontology/MusicalWork> .\r\n    ?_1 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Work> .\r\n    ?_3 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_3 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_3 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_2 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_2 a <http://dbpedia.org/class/yago/FusionMusicGenres> .\r\n    ?_2 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/class/yago/PopMusicGenres> .\r\n    ?_3 <http://dbpedia.org/property/stylisticOrigins> ?_4 .\r\n    ?_1 <http://dbpedia.org/ontology/genre> ?_2 .\r\n    ?_2 <http://dbpedia.org/property/otherTopics> ?_3 .\r\n    }\r\n\r\n**RDF-Type Summary Graph of the 10% Dataset**\r\n\r\nThe shortest path found by the algorithm is:\r\n\r\n    ['http://dbpedia.org/ontology/Album\\nhttp://dbpedia.org/ontology/MusicalWork\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Work',('http://dbpedia.org/ontology/Album\\nhttp://dbpedia.org/ontology/MusicalWork\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Work','http://dbpedia.org/ontology/artist','http://dbpedia.org/class/yago/JapaneseIndieRockGroups\\nhttp://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/JapaneseRockMusicGroups'),'http://dbpedia.org/class/yago/JapaneseIndieRockGroups\\nhttp://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/JapaneseRockMusicGroups',('http://dbpedia.org/class/yago/JapaneseIndieRockGroups\\nhttp://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/JapaneseRockMusicGroups','http://dbpedia.org/ontology/genre','http://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing',('http://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing','http://dbpedia.org/ontology/stylisticOrigin','http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/HardcorePunkGenres'),'http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/HardcorePunkGenres',('http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/HardcorePunkGenres','http://dbpedia.org/property/stylisticOrigins','http://dbpedia.org/class/yago/PunkGenres\\nhttp://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/class/yago/PunkGenres\\nhttp://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing']\r\n\r\nThe path is converted to this SPARQL 1.0 code:\r\n\r\n    SELECT DISTINCT * WHERE {\r\n    ?_5 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_5 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_5 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_4 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_4 a <http://dbpedia.org/class/yago/FusionMusicGenres> .\r\n    ?_4 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_4 a <http://dbpedia.org/class/yago/HardcorePunkGenres> .\r\n    ?_1 a <http://dbpedia.org/ontology/Album> .\r\n    ?_1 a <http://dbpedia.org/ontology/MusicalWork> .\r\n    ?_1 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Work> .\r\n    ?_3 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_3 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/class/yago/JapaneseIndieRockGroups> .\r\n    ?_2 a <http://dbpedia.org/ontology/Band> .\r\n    ?_2 a <http://dbpedia.org/ontology/Organisation> .\r\n    ?_2 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/class/yago/JapaneseRockMusicGroups> .\r\n    ?_3 <http://dbpedia.org/ontology/stylisticOrigin> ?_4 .\r\n    ?_4 <http://dbpedia.org/property/stylisticOrigins> ?_5 .\r\n    ?_1 <http://dbpedia.org/ontology/artist> ?_2 .\r\n    ?_2 <http://dbpedia.org/ontology/genre> ?_3 .\r\n    }\r\n\r\n**RDF-Type Summary Graph of the 50% Dataset**\r\n\r\nThe shortest path found by the algorithm is:\r\n\r\n    ['http://dbpedia.org/ontology/Album\\nhttp://dbpedia.org/ontology/MusicalWork\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Work',('http://dbpedia.org/ontology/Album\\nhttp://dbpedia.org/ontology/MusicalWork\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Work','http://dbpedia.org/property/artist','http://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/class/yago/MusicalGroupsEstablishedIn2002\\nhttp://dbpedia.org/class/yago/2000sMusicGroups\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://dbpedia.org/class/yago/BostonMusicalGroups\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/AmericanPunkRockGroups'),'http://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/class/yago/MusicalGroupsEstablishedIn2002\\nhttp://dbpedia.org/class/yago/2000sMusicGroups\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://dbpedia.org/class/yago/BostonMusicalGroups\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/AmericanPunkRockGroups',('http://dbpedia.org/ontology/Band\\nhttp://dbpedia.org/class/yago/MusicalGroupsEstablishedIn2002\\nhttp://dbpedia.org/class/yago/2000sMusicGroups\\nhttp://dbpedia.org/ontology/Organisation\\nhttp://dbpedia.org/class/yago/BostonMusicalGroups\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/class/yago/AmericanPunkRockGroups','http://dbpedia.org/property/origin','http://dbpedia.org/ontology/PopulatedPlace\\nhttp://dbpedia.org/class/yago/Country108544813\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Place\\nhttp://dbpedia.org/class/yago/StatesOfTheUnitedStates\\nhttp://dbpedia.org/ontology/AdministrativeRegion'),'http://dbpedia.org/ontology/PopulatedPlace\\nhttp://dbpedia.org/class/yago/Country108544813\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Place\\nhttp://dbpedia.org/class/yago/StatesOfTheUnitedStates\\nhttp://dbpedia.org/ontology/AdministrativeRegion',('http://dbpedia.org/ontology/PopulatedPlace\\nhttp://dbpedia.org/class/yago/Country108544813\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Place\\nhttp://dbpedia.org/class/yago/StatesOfTheUnitedStates\\nhttp://dbpedia.org/ontology/AdministrativeRegion','http://dbpedia.org/property/flower','http://dbpedia.org/ontology/Plant\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Eukaryote\\nhttp://dbpedia.org/ontology/Species'),'http://dbpedia.org/ontology/Plant\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Eukaryote\\nhttp://dbpedia.org/ontology/Species',('http://dbpedia.org/ontology/Plant\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/Eukaryote\\nhttp://dbpedia.org/ontology/Species','http://dbpedia.org/ontology/binomialAuthority','http://dbpedia.org/ontology/Person\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/MusicalArtist\\nhttp://dbpedia.org/ontology/Artist'),'http://dbpedia.org/ontology/Person\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/MusicalArtist\\nhttp://dbpedia.org/ontology/Artist',('http://dbpedia.org/ontology/Person\\nhttp://www.w3.org/2002/07/owl#Thing\\nhttp://dbpedia.org/ontology/MusicalArtist\\nhttp://dbpedia.org/ontology/Artist','http://dbpedia.org/property/genre','http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/MetalSubgenres\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/MetalSubgenres\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing',('http://dbpedia.org/ontology/MusicGenre\\nhttp://dbpedia.org/class/yago/MetalSubgenres\\nhttp://dbpedia.org/class/yago/FusionMusicGenres\\nhttp://www.w3.org/2002/07/owl#Thing','http://dbpedia.org/property/stylisticOrigins','http://dbpedia.org/class/yago/PunkGenres\\nhttp://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/class/yago/PunkGenres\\nhttp://dbpedia.org/ontology/MusicGenre\\nhttp://www.w3.org/2002/07/owl#Thing']\r\n\r\nThe path is converted to this SPARQL 1.0 code:\r\n\r\n    SELECT DISTINCT * WHERE {\r\n    ?_5 a <http://dbpedia.org/ontology/Person> .\r\n    ?_5 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_5 a <http://dbpedia.org/ontology/MusicalArtist> .\r\n    ?_5 a <http://dbpedia.org/ontology/Artist> .\r\n    ?_4 a <http://dbpedia.org/ontology/Plant> .\r\n    ?_4 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_4 a <http://dbpedia.org/ontology/Eukaryote> .\r\n    ?_4 a <http://dbpedia.org/ontology/Species> .\r\n    ?_7 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_7 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_7 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_6 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_6 a <http://dbpedia.org/class/yago/MetalSubgenres> .\r\n    ?_6 a <http://dbpedia.org/class/yago/FusionMusicGenres> .\r\n    ?_6 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Album> .\r\n    ?_1 a <http://dbpedia.org/ontology/MusicalWork> .\r\n    ?_1 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Work> .\r\n    ?_3 a <http://dbpedia.org/ontology/PopulatedPlace> .\r\n    ?_3 a <http://dbpedia.org/class/yago/Country108544813> .\r\n    ?_3 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_3 a <http://dbpedia.org/ontology/Place> .\r\n    ?_3 a <http://dbpedia.org/class/yago/StatesOfTheUnitedStates> .\r\n    ?_3 a <http://dbpedia.org/ontology/AdministrativeRegion> .\r\n    ?_2 a <http://dbpedia.org/ontology/Band> .\r\n    ?_2 a <http://dbpedia.org/class/yago/MusicalGroupsEstablishedIn2002> .\r\n    ?_2 a <http://dbpedia.org/class/yago/2000sMusicGroups> .\r\n    ?_2 a <http://dbpedia.org/ontology/Organisation> .\r\n    ?_2 a <http://dbpedia.org/class/yago/BostonMusicalGroups> .\r\n    ?_2 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/class/yago/AmericanPunkRockGroups> .\r\n    ?_1 <http://dbpedia.org/property/artist> ?_2 .\r\n    ?_3 <http://dbpedia.org/property/flower> ?_4 .\r\n    ?_6 <http://dbpedia.org/property/stylisticOrigins> ?_7 .\r\n    ?_2 <http://dbpedia.org/property/origin> ?_3 .\r\n    ?_4 <http://dbpedia.org/ontology/binomialAuthority> ?_5 .\r\n    ?_5 <http://dbpedia.org/property/genre> ?_6 .\r\n    }\r\n\r\n**RDF-Type Summary Graph of the 100% Dataset**\r\n\r\nThe shortest path found by the algorithm is:\r\n\r\n    ['http://dbpedia.org/ontology/Album^http://dbpedia.org/ontology/MusicalWork^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/Work',('http://dbpedia.org/ontology/Album^http://dbpedia.org/ontology/MusicalWork^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/Work','http://dbpedia.org/property/artist','http://dbpedia.org/class/yago/MurderedHipHopMusicians^http://dbpedia.org/class/yago/SouthernHipHopMusicians^http://dbpedia.org/class/yago/MurderedEntertainers^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/Rapper110507482^http://dbpedia.org/class/yago/MusiciansOfNewOrleans^http://dbpedia.org/ontology/Artist^http://dbpedia.org/class/yago/Artist109812338^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Person^http://dbpedia.org/class/yago/SouthernRappers^http://dbpedia.org/class/yago/AmericanMurderVictims^http://dbpedia.org/class/yago/AfricanAmericanRappers'),'http://dbpedia.org/class/yago/MurderedHipHopMusicians^http://dbpedia.org/class/yago/SouthernHipHopMusicians^http://dbpedia.org/class/yago/MurderedEntertainers^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/Rapper110507482^http://dbpedia.org/class/yago/MusiciansOfNewOrleans^http://dbpedia.org/ontology/Artist^http://dbpedia.org/class/yago/Artist109812338^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Person^http://dbpedia.org/class/yago/SouthernRappers^http://dbpedia.org/class/yago/AmericanMurderVictims^http://dbpedia.org/class/yago/AfricanAmericanRappers',('http://dbpedia.org/class/yago/MurderedHipHopMusicians^http://dbpedia.org/class/yago/SouthernHipHopMusicians^http://dbpedia.org/class/yago/MurderedEntertainers^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/class/yago/Rapper110507482^http://dbpedia.org/class/yago/MusiciansOfNewOrleans^http://dbpedia.org/ontology/Artist^http://dbpedia.org/class/yago/Artist109812338^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Person^http://dbpedia.org/class/yago/SouthernRappers^http://dbpedia.org/class/yago/AmericanMurderVictims^http://dbpedia.org/class/yago/AfricanAmericanRappers','http://dbpedia.org/property/associatedActs','http://dbpedia.org/ontology/Person^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Artist'),'http://dbpedia.org/ontology/Person^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Artist',('http://dbpedia.org/ontology/Person^http://www.w3.org/2002/07/owl#Thing^http://dbpedia.org/ontology/MusicalArtist^http://dbpedia.org/ontology/Artist','http://dbpedia.org/property/genre','http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/MusicGenres^http://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/MusicGenres^http://www.w3.org/2002/07/owl#Thing',('http://dbpedia.org/ontology/MusicGenre^http://dbpedia.org/class/yago/MusicGenres^http://www.w3.org/2002/07/owl#Thing','http://dbpedia.org/property/stylisticOrigins','http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing'),'http://dbpedia.org/class/yago/PunkGenres^http://dbpedia.org/ontology/MusicGenre^http://www.w3.org/2002/07/owl#Thing']\r\n\r\nThe path is converted to this SPARQL 1.0 code:\r\n\r\n    SELECT DISTINCT * WHERE {\r\n    ?_5 a <http://dbpedia.org/class/yago/PunkGenres> .\r\n    ?_5 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_5 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_4 a <http://dbpedia.org/ontology/MusicGenre> .\r\n    ?_4 a <http://dbpedia.org/class/yago/MusicGenres> .\r\n    ?_4 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Album> .\r\n    ?_1 a <http://dbpedia.org/ontology/MusicalWork> .\r\n    ?_1 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_1 a <http://dbpedia.org/ontology/Work> .\r\n    ?_3 a <http://dbpedia.org/ontology/Person> .\r\n    ?_3 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_3 a <http://dbpedia.org/ontology/MusicalArtist> .\r\n    ?_3 a <http://dbpedia.org/ontology/Artist> .\r\n    ?_2 a <http://dbpedia.org/class/yago/MurderedHipHopMusicians> .\r\n    ?_2 a <http://dbpedia.org/class/yago/SouthernHipHopMusicians> .\r\n    ?_2 a <http://dbpedia.org/class/yago/AmericanMurderVictims> .\r\n    ?_2 a <http://dbpedia.org/class/yago/MurderedEntertainers> .\r\n    ?_2 a <http://dbpedia.org/class/yago/Rapper110507482> .\r\n    ?_2 a <http://dbpedia.org/class/yago/MusiciansOfNewOrleans> .\r\n    ?_2 a <http://dbpedia.org/ontology/Artist> .\r\n    ?_2 a <http://www.w3.org/2002/07/owl#Thing> .\r\n    ?_2 a <http://dbpedia.org/ontology/MusicalArtist> .\r\n    ?_2 a <http://dbpedia.org/ontology/Person> .\r\n    ?_2 a <http://dbpedia.org/class/yago/SouthernRappers> .\r\n    ?_2 a <http://dbpedia.org/class/yago/Artist109812338> .\r\n    ?_2 a <http://dbpedia.org/class/yago/AfricanAmericanRappers> .\r\n    ?_3 <http://dbpedia.org/property/genre> ?_4 .\r\n    ?_4 <http://dbpedia.org/property/stylisticOrigins> ?_5 .\r\n    ?_1 <http://dbpedia.org/property/artist> ?_2 .\r\n    ?_2 <http://dbpedia.org/property/associatedActs> ?_3 .\r\n    }\r\n\r\n##Query Execution Time Decrease\r\nHere we give an explanation of the query execution time decrease at the final point in the plot. The time measurement depends mainly on the running time of the shortest-path algorithm. Since the 50% dataset contains less triples than the 100% dataset, the corresponding RDF-type summary graphs may contain different shortest paths between the same endpoints. This means that the algorithm would have to examine more nodes (in the RDF-type summary graph of the 50% dataset) in order to find the shortest path. As a result, the query execution time could be greater in the 50% dataset than in the 100% dataset. Therefore, the execution time of the navigational query is independant of the RDF graph size. Instead, it depends on the size of the RDF-type summary which, in turn, is proportional to the number of predicates it contains.\r\n\r\nIf there is no path between the endpoints, the Dijkstra algorithm is expected to take more time to finish due to visiting a greater number of nodes.\r\n\r\n#Repository Contents\r\nIn this repository you can find links to the DBPEDIA datasets that were used for the evaluation of the paper.\r\n##Dataset links\r\nThe datasets used for the evaluation can be downloaded from the links below:\r\n* The 100% DBPEDIA dataset: http://benchmark.dbpedia.org/benchmark_100.nt.bz2\r\n* The 50% DBPEDIA dataset: http://benchmark.dbpedia.org/benchmark_50.nt.bz2\r\n* The 10% DBPEDIA dataset: http://benchmark.dbpedia.org/benchmark_10.nt.bz2\r\n\r\nThe 1% DBPEDIA dataset can be created from the 10% dataset by keeping the first 1537384 triples. This is done by executing this command:\r\n\r\n    head -1537384 benchmark_10.nt > benchmark_1.nt\r\n\r\n##Automated evaluation script\r\nWe have prepared a script that takes as input the 4 DBPEDIA datasets (namely benchmark_1.nt, benchmark_10.nt, benchmark_50.nt and benchmark_100.nt) and creates all RDF-type summary graphs, executes the example query against the graphs, measures execution time and creates the scalability plot. The script can be found at [automated_evaluation.py](https://github.com/SWRG/ESWC2015-paper-evaluation/blob/master/automated_evaluation.py).\r\nBefore executing the script make sure networkx, librdf and gnuplot are installed in the system. To install these packages on an Ubuntu 14.04 platform, just give the following command:\r\n\r\n    sudo apt-get install gnuplot, python-networkx, python-librdf\r\n\r\nThe dataset files benchmark_1.nt, benchmark_10.nt, benchmark_50.nt and benchmark_100.nt must be in the same directory. The automated evaluation script is executed with the command:\r\n\r\n    python automated_evaluation.py DATASET_DIR\r\n\r\nwhere DATASET_DIR is the directory that contains the datasets. The script stores the RDF-type summary graphs in the same directory. In addition, it creates a directory named 'evaluationdata' where it stores the scalability plot along with the corresponding data.\r\n\r\nThe most time consuming step of the evaluation is the RDF-type summary creation. In our setup, the creation time of each dataset was:\r\n\r\n1. for the 1% dataset: 4min\r\n1. for the 10% dataset: 17min\r\n1. for the 50% dataset: 90min\r\n1. for the 100% dataset: 210min","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}